pipeline {
  agent any
  environment {
    GITHUB_CREDENTIALS = credentials('github-credentials-id')
  }
  tools {
    maven 'M3'
  }
  stages {
    stage('Checkout from Github') {
      steps {
        git url: 'https://github.com/bjjd-microservices/bjjd-services.git', branch: 'master'
      }
    }
    stage('QualityStatusGateCheck') {
      when {
                      branch 'production'
      }
      steps {
        dir('user-service') {
            script {
              withSonarQubeEnv('sonarserver') {
                sh "mvn sonar:sonar"
              }
              timeout(time: 1, unit: 'HOURS') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
              }
            }
          }
      }
    }
    stage('Build Project') {
      steps {
        sh "mvn clean install -DskipTests -P prod"
        script {
          def version = sh script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true
          print version
          env.version = version
        }
      }
    }
    stage('Build Docker Image and push on Docker Hub') {
      steps {
        dir('user-service') {
          withCredentials([string(credentialsId: 'DockerHubPassword', variable: 'DockerHubPassword')]) {
            sh "docker build -t rajivbansal2981/user-service:${env.version} ."
            sh "docker login -u rajivbansal2981 -p ${DockerHubPassword}"
            sh "docker push rajivbansal2981/user-service:${env.version}"
            sh "docker rmi rajivbansal2981/user-service:${env.version}"
          }
        }
      }
    }
    stage('DeployDockerApplicationInJenkinsServer') {
         when {
               branch 'production'
         }
         steps {
               sh "docker run -d -p 3379:3379 --name user-service rajivbansal2981/user-service:${env.version}"
           }
     }
     stage('Validating helm configurations using Datree'){
             steps {
                 dir('user-service/k8s/') {
                    sh "helm datree test user-service/"
                 }
             }
       }
  }
  post {
       		always {
       			mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "rajivbansal2981@gmail.com";
       		}
       }
}