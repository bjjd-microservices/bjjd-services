pipeline {
  agent any
  environment {
    GITHUB_CREDENTIALS = credentials('github-credentials-id')
  }
  tools {
    maven 'M3'
  }
  stages {
    stage('Checkout from Github') {
      steps {
        git url: 'https://github.com/bjjd-microservices/bjjd-services.git', branch: 'master'
      }
    }
    stage('QualityStatusGateCheck') {
      when {
                      branch 'production'
      }
      steps {
        dir('user-service') {
            script {
              withSonarQubeEnv('sonarserver') {
                sh "mvn sonar:sonar"
              }
              timeout(time: 1, unit: 'HOURS') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
              }
            }
          }
      }
    }
    stage('Build Project') {
      steps {
        sh "mvn clean install -DskipTests -P prod"
        script {
          def version = sh script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true
          print version
          env.version = version
        }
      }
    }
    stage('Build Docker Image and Push on Docker Hub') {
      steps {
        dir('user-service') {
          withCredentials([string(credentialsId: 'DockerHubPassword', variable: 'DockerHubPassword')]) {
            //1. Build docker image
            //sh "docker build -t rajivbansal2981/user-service:${env.version} ."
            //2. Login and push docker image
            //sh "docker login -u rajivbansal2981 -p ${DockerHubPassword}"
            //sh "docker push rajivbansal2981/user-service:${env.version}"
            //3. Remove docker image from jenkins machine
            //sh "docker rmi rajivbansal2981/user-service:${env.version}"
          }
        }
      }
    }
    stage('Validating helm configurations using Datree'){
                 steps {
                     dir('user-service/k8s/') {
                        withEnv(['DATREE_TOKEN=3736500e-a75c-49ca-b271-24ea5f611c90']) {
                        //    sh "helm datree test user-service/"
                        }
                     }
                 }
           }
        stage('Package helm chart and Push to Github Repository') {
          steps {
            dir('user-service/k8s') {
              script{
                    def chartVersion =  sh script: "helm show chart user-service | grep version | cut -d: -f 2 | tr -d ' '",returnStdout: true
                    def chartName =  sh script: "helm show chart user-service | grep name | cut -d: -f 2 | tr -d ' '",returnStdout: true
                    def chartPackage ="${chartName}-${chartVersion}.tgz"
                    echo "Chart package is ${chartPackage}"
                    def chartPath = "user-service"

                    def gitUrl = "https://github.com/bjjd-microservices/k8s-helm-chart-repo.git"
                    def branch = "main"
                    def commitMessage = "Update chart to version ${chartVersion}"
                    //1. Packaging helm chart
                    sh "helm package ${chartPath} --version ${chartVersion}"
                    def gitHubToken = credentials('github-credentials-id')
                    //2. Update the index.yaml file
                   //sh "helm repo index . --url ${repoUrl} --merge ${indexPath}"
                    def gitHub = github url: 'https://github.com/bjjd-microservices/k8s-helm-chart-repo.git', credentialsId: gitHubToken.id

                    def filePath = 'my-file.txt'
                    def fileContent = 'Hello, world!'
                    def encodedContent = fileContent.bytes.encodeBase64().toString()

                     // Create the new file on the GitHub repository
                    gitHub.writeFile file: filePath, content: encodedContent, message: commitMessage, branch: branch


                 // Add the GitHub remote
              //   sh "git remote add origin ${gitUrl}"

                 // Push the Helm chart package to the GitHub repository
           //      sh "git add ${chartPackage}"
            //     sh "git commit -m '${commitMessage}'"
             //    sh "git push origin ${branch}"

              }


            }
          }
        }

       stage('DeployDockerApplicationInJenkinsServer') {
                when {
                      branch 'production'
                }
                steps {
                      sh "docker run -d -p 3379:3379 --name user-service rajivbansal2981/user-service:${env.version}"
                  }
       }
  }
  post {
       		always {
       			mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "rajivbansal2981@gmail.com";
       		}
       }
}
