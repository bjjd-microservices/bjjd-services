/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.jmk.account.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.jmk.account.model.Expense;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-04-05T20:28:14.461+05:30")

@Api(value = "expense", description = "the expense API")
@RequestMapping(value = "/expense")
public interface ExpenseApi {
	
    @ApiOperation(value = "Save Expense Service", nickname = "saveExpense", notes = "Save Expense Service", response = Expense.class, tags={ "ExpenseService", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Expense.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Expense> saveExpense(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Expense body,@ApiParam(value = "" ) @RequestHeader(value="xChannel", required=false) String xChannel);

    @ApiOperation(value = "Saving Expenses with input arrays Service", nickname = "saveExpenses", notes = "Saving Expenses", tags={ "ExpenseService", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/saveExpenses",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<Expense>> saveExpenses(@ApiParam(value = "" ,required=true )  @Valid @RequestBody List<Expense> body,@ApiParam(value = "" ) @RequestHeader(value="xChannel", required=false) String xChannel);
    
    @ApiOperation(value = "Expense Deletion Service based on the expense id", nickname = "deleteExpenseById", notes = "Expense Deletion Service based on the expense id", tags={ "ExpenseService", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expense deleted succussfully"),
        @ApiResponse(code = 400, message = "Invalid User id supplied"),
        @ApiResponse(code = 404, message = "Expense Id not found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteExpenseById(@ApiParam(value = "Expense Id",required=true) @PathVariable("id") Long id);

    @ApiOperation(value = "Find Expense Details based on the expense id", nickname = "findExpenseDetailsById", notes = "Find Expense Details based on the expense id", response = Expense.class, tags={ "ExpenseService", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully found", response = Expense.class),
        @ApiResponse(code = 400, message = "Invalid Expense name and password supplied"),
        @ApiResponse(code = 404, message = "Expense not found or inactive"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Expense> findExpenseDetailsById(@ApiParam(value = "Expense Id",required=true) @PathVariable("id") Long id);
    
    @ApiOperation(value = "Update Expense Details based on the expense id", nickname = "updateExpenseById", notes = "Update Expense Details based on the expense id", response = Expense.class, tags={ "ExpenseService", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully found", response = Expense.class),
        @ApiResponse(code = 400, message = "Invalid Expense name supplied"),
        @ApiResponse(code = 404, message = "Expense not found or inactive"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Expense> updateExpenseById(@ApiParam(value = "Expense Id",required=true) @PathVariable("id") Long id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Expense body);

}
