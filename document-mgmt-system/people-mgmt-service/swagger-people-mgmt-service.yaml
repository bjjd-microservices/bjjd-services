{
   "swagger":"2.0",
   "info":{
      "version":"18.10.0",
      "title":"People Management Service API"
   },
   "basePath":"/api/",
   "tags":[
      {
         "name":"DevoteeMgmtServiceApi",
         "description": "Everything about the Devotee"
      },
      {
         "name":"SevadarMgmtServiceApi",
         "description": "Everything about the sevadar"
      },
      {
         "name":"MemberMgmtServiceApi",
         "description": "Everything about the member"
      }
   ],
   "schemes":[
      "https"
   ],
   "paths":{
      "/devotee":{
         "post":{
            "tags":[
               "DevoteeMgmtServiceApi"
            ],
            "summary":"Devotee Creation Service",
            "description":"Devotee Creation Service",
            "operationId":"createDevotee",
            "consumes":[
               "application/json",
               "application/xml"
            ],
            "produces":[
               "application/json",
               "application/xml"
            ],
            "parameters":[
               {
                  "name":"xChannel",
                  "in":"header",
                  "required":false,
                  "type":"string",
                  "minLength":3,
                  "maxLength":36
               },
               {
                  "in":"body",
                  "name":"body",
                  "required":true,
                  "schema":{
                     "$ref":"#/definitions/Devotee"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"OK",
                  "schema":{
                     "$ref":"#/definitions/Devotee"
                  }
               },
               "400":{
                  "description":"Bad Request"
               },
               "500":{
                  "description":"Internal Server Error"
                }
            }
         }
      },
      "/devotee/findByMobileNumber":{
         "get":{
            "tags":[
               "DevoteeMgmtServiceApi"
            ],
            "summary":"Find all the devotees by status",
            "description":"Find all the devotees by status",
            "operationId":"findDevoteeByMobileNumber",
            "consumes":[
               "application/json",
               "application/xml"
            ],
            "produces":[
               "application/json",
               "application/xml"
            ],
            "parameters":[
               {
                  "name":"xChannel",
                  "in":"header",
                  "required":false,
                  "type":"string",
                  "minLength":3,
                  "maxLength":36
               },
               {
                "name": "mobileNo",
                "in": "query",
                "required": false,
                "type": "string"
               }
            ],
            "responses":{
              "200":{
                  "description":"Successfully found",
                  "schema":{
                     "$ref":"#/definitions/Devotee"
                  }
               },
               "400":{
                  "description":"Invalid mobile number supplied"
               },
               "404":{
                  "description":"Devotee not found or inactive"
               },
               "500":{
                  "description":"Internal Server Error"
               }

            }
         }
      },
      "/devotee/findByStatus":{
         "get":{
            "tags":[
               "DevoteeMgmtServiceApi"
            ],
            "summary":"Find all the devotees by status",
            "description":"Find all the devotees by status",
            "operationId":"findDevoteesByStatus",
            "consumes":[
               "application/json",
               "application/xml"
            ],
            "produces":[
               "application/json",
               "application/xml"
            ],
            "parameters":[
               {
                  "name":"xChannel",
                  "in":"header",
                  "required":false,
                  "type":"string",
                  "minLength":3,
                  "maxLength":36
               },
               {
                "name": "status",
                "in": "query",
                "description": "The status to restrict the results to.  If not provided, all records are returned",
                "required": false,
                "type": "string",
                "enum": ["A","I"]
               }
            ],
            "responses":{
               "200":{
                  "description":"OK",
                  "schema":{
           "type" :"array",
           "items":{
            "$ref":"#/definitions/Devotee"
           }
                  }
               },
               "400":{
                  "description":"Invalid status value"
               },
               "500":{
                  "description":"Internal Server Error"
                }
            }
         }
      },
    "/devotee/createWithArray":{
    "post":{
      "tags":[
        "DevoteeMgmtServiceApi"
      ],
      "summary":"Devotee Creation with input arrays Service",
            "description":"Devotee Finding Service",
            "operationId":"createDevoteesWithArrayInput",
       "consumes":[
               "application/json"
            ],
            "produces":[
               "application/json"
            ],
      "parameters":[
               {
                  "name":"xChannel",
                  "in":"header",
                  "required":false,
                  "type":"string",
                  "minLength":3,
                  "maxLength":36
               },
               {
                  "in":"body",
                  "name":"body",
                  "required":true,
                  "schema":{
           "type" :"array",
           "items":{
            "$ref":"#/definitions/Devotee"
           }
                  }
               }
            ],
      "responses":{
               "200":{
                  "description":"Successfully found"
                 
               },
               "500":{
                  "description":"Internal Server Error"
               }
            }
    }
    },
    "/devotee/{id}":{
         "get":{
            "tags":[
               "DevoteeMgmtServiceApi"
            ],
            "summary":"Find Devotee Details based on the devotee id",
            "description":"Find Devotee Details based on the devotee id",
            "operationId":"findDevoteeDetailsById",
            "consumes":[
               "application/json"
            ],
            "produces":[
               "application/json"
            ],
            "parameters":[
               {
                  "name":"id",
                  "in":"path",
                  "required":true,
                  "description":"Devotee Id",
                  "type":"integer"
               }
            ],
            "responses":{
               "200":{
                  "description":"Successfully found",
                  "schema":{
                     "$ref":"#/definitions/Devotee"
                  }
               },
               "400":{
                  "description":"Invalid Devotee name and password supplied"
               },
               "404":{
                  "description":"Devotee not found or inactive"
               },
               "500":{
                  "description":"Internal Server Error"
               }
            }
         },
      "put":{
            "tags":[
               "DevoteeMgmtServiceApi"
            ],
            "summary":"Update Devotee Details based on the devotee id",
            "description":"Update Devotee Details based on the devotee id",
            "operationId":"updateDevoteeById",
            "consumes":[
               "application/json"
            ],
            "produces":[
               "application/json"
            ],
            "parameters":[
               {
                  "name":"id",
                  "in":"path",
                  "required":true,
                  "description":"Devotee Id",
                  "type":"integer"
               },
         {
                  "in":"body",
                  "name":"body",
                  "required":true,
                  "schema":{
                     "$ref":"#/definitions/Devotee"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successfully found",
                  "schema":{
                     "$ref":"#/definitions/Devotee"
                  }
               },
               "400":{
                  "description":"Invalid Devotee name supplied"
               },
               "404":{
                  "description":"Devotee not found or inactive"
               },
               "500":{
                  "description":"Internal Server Error"
               }
            }
         },
     "delete":{
            "tags":[
               "DevoteeMgmtServiceApi"
            ],
            "summary":"Devotee Deletion Service based on the devotee id",
            "description":"Devotee Deletion Service based on the devotee id",
            "operationId":"deleteDevoteeById",
            "consumes":[
               "application/json"
            ],
            "produces":[
               "application/json"
            ],
            "parameters":[
                {
                   "name":"id",
                  "in":"path",
                  "required":true,
                  "description":"Devotee Id",
                  "type":"integer"
               }
            ],
            "responses":{
               "200":{
                  "description":"Devotee deleted succussfully"
               },
               "400":{
                  "description":"Invalid User id supplied"
               },
               "404":{
                  "description":"Devotee Id not found"
               },
               "500":{
                  "description":"Internal Server Error"
               }
            }
         }
      },
      "/sevadar":{
         "post":{
            "tags":[
               "SevadarMgmtServiceApi"
            ],
            "summary":"Sevadar Creation Service",
            "description":"Sevadar Creation Service",
            "operationId":"createSevadar",
            "consumes":[
               "application/json",
               "application/xml"
            ],
            "produces":[
               "application/json",
               "application/xml"
            ],
            "parameters":[
               {
                  "name":"xChannel",
                  "in":"header",
                  "required":false,
                  "type":"string",
                  "minLength":3,
                  "maxLength":36
               },
               {
                  "in":"body",
                  "name":"body",
                  "required":true,
                  "schema":{
                     "$ref":"#/definitions/Sevadar"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"OK",
                  "schema":{
                     "$ref":"#/definitions/Sevadar"
                  }
               },
               "400":{
                  "description":"Bad Request"
               },
               "500":{
                  "description":"Internal Server Error"
                }
            }
         }
      },
      "/sevadar/findByMobileNumber":{
         "get":{
            "tags":[
               "SevadarMgmtServiceApi"
            ],
            "summary":"Find the sevadar by mobile number",
            "description":"Find the sevadar by mobile number",
            "operationId":"findSevadarByMobileNumber",
            "consumes":[
               "application/json",
               "application/xml"
            ],
            "produces":[
               "application/json",
               "application/xml"
            ],
            "parameters":[
               {
                  "name":"xChannel",
                  "in":"header",
                  "required":false,
                  "type":"string",
                  "minLength":3,
                  "maxLength":36
               },
               {
                "name": "mobileNo",
                "in": "query",
                "required": false,
                "type": "string"
               }
            ],
            "responses":{
              "200":{
                  "description":"Successfully found",
                  "schema":{
                     "$ref":"#/definitions/Sevadar"
                  }
               },
               "400":{
                  "description":"Invalid mobile number supplied"
               },
               "404":{
                  "description":"Sevadar not found or inactive"
               },
               "500":{
                  "description":"Internal Server Error"
               }

            }
         }
      },
      "/sevadar/findByStatus":{
         "get":{
            "tags":[
               "SevadarMgmtServiceApi"
            ],
            "summary":"Find the sevadars by status",
            "description":"Find all the sevadars by status",
            "operationId":"findSevadarsByStatus",
            "consumes":[
               "application/json",
               "application/xml"
            ],
            "produces":[
               "application/json",
               "application/xml"
            ],
            "parameters":[
               {
                  "name":"xChannel",
                  "in":"header",
                  "required":false,
                  "type":"string",
                  "minLength":3,
                  "maxLength":36
               },
               {
                "name": "status",
        "in": "query",
        "description": "The status to restrict the results to.  If not provided, all records are returned",
        "required": false,
        "type": "string",
        "enum": ["A","I"]
               }
            ],
            "responses":{
               "200":{
                  "description":"OK",
                  "schema":{
           "type" :"array",
           "items":{
            "$ref":"#/definitions/Sevadar"
           }
                  }
               },
               "400":{
                  "description":"Invalid status value"
               },
               "500":{
                  "description":"Internal Server Error"
                }
            }
         }
      },
    "/sevadar/createWithArray":{
    "post":{
      "tags":[
        "SevadarMgmtServiceApi"
      ],
      "summary":"Sevadar Creation with input arrays Service",
            "description":"Sevadar Finding Service",
            "operationId":"createSevadarsWithArrayInput",
       "consumes":[
               "application/json"
            ],
            "produces":[
               "application/json"
            ],
      "parameters":[
               {
                  "name":"xChannel",
                  "in":"header",
                  "required":false,
                  "type":"string",
                  "minLength":3,
                  "maxLength":36
               },
               {
                  "in":"body",
                  "name":"body",
                  "required":true,
                  "schema":{
           "type" :"array",
           "items":{
            "$ref":"#/definitions/Sevadar"
           }
                  }
               }
            ],
      "responses":{
               "200":{
                  "description":"Successfully found"
                 
               },
               "500":{
                  "description":"Internal Server Error"
               }
            }
    }
    },
    "/sevadar/{id}":{
         "get":{
            "tags":[
               "SevadarMgmtServiceApi"
            ],
            "summary":"Find Sevadar Details based on the sevadar id",
            "description":"Find Sevadar Details based on the sevadar id",
            "operationId":"findSevadarDetailsById",
            "consumes":[
               "application/json"
            ],
            "produces":[
               "application/json"
            ],
            "parameters":[
               {
                  "name":"id",
                  "in":"path",
                  "required":true,
                  "description":"Sevadar Id",
                  "type":"integer"
               }
            ],
            "responses":{
               "200":{
                  "description":"Successfully found",
                  "schema":{
                     "$ref":"#/definitions/Sevadar"
                  }
               },
               "400":{
                  "description":"Invalid Sevadar name and password supplied"
               },
               "404":{
                  "description":"Sevadar not found or inactive"
               },
               "500":{
                  "description":"Internal Server Error"
               }
            }
         },
      "put":{
            "tags":[
               "SevadarMgmtServiceApi"
            ],
            "summary":"Update Sevadar Details based on the sevadar id",
            "description":"Update Sevadar Details based on the sevadar id",
            "operationId":"updateSevadarById",
            "consumes":[
               "application/json"
            ],
            "produces":[
               "application/json"
            ],
            "parameters":[
               {
                  "name":"id",
                  "in":"path",
                  "required":true,
                  "description":"Sevadar Id",
                  "type":"integer"
               },
         {
                  "in":"body",
                  "name":"body",
                  "required":true,
                  "schema":{
                     "$ref":"#/definitions/Sevadar"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successfully found",
                  "schema":{
                     "$ref":"#/definitions/Sevadar"
                  }
               },
               "400":{
                  "description":"Invalid Sevadar name supplied"
               },
               "404":{
                  "description":"Sevadar not found or inactive"
               },
               "500":{
                  "description":"Internal Server Error"
               }
            }
         },
     "delete":{
            "tags":[
               "SevadarMgmtServiceApi"
            ],
            "summary":"Sevadar Deletion Service based on the sevadar id",
            "description":"Sevadar Deletion Service based on the sevadar id",
            "operationId":"deleteSevadarById",
            "consumes":[
               "application/json"
            ],
            "produces":[
               "application/json"
            ],
            "parameters":[
                {
                   "name":"id",
                  "in":"path",
                  "required":true,
                  "description":"Sevadar Id",
                  "type":"integer"
               }
            ],
            "responses":{
               "200":{
                  "description":"Sevadar deleted succussfully"
               },
               "400":{
                  "description":"Invalid User id supplied"
               },
               "404":{
                  "description":"Sevadar Id not found"
               },
               "500":{
                  "description":"Internal Server Error"
               }
            }
         }
      },
      "/member":{
         "post":{
            "tags":[
               "MemberMgmtServiceApi"
            ],
            "summary":"Member Creation Service",
            "description":"Member Creation Service",
            "operationId":"createMember",
            "consumes":[
               "application/json",
               "application/xml"
            ],
            "produces":[
               "application/json",
               "application/xml"
            ],
            "parameters":[
               {
                  "name":"xChannel",
                  "in":"header",
                  "required":false,
                  "type":"string",
                  "minLength":3,
                  "maxLength":36
               },
               {
                  "in":"body",
                  "name":"body",
                  "required":true,
                  "schema":{
                     "$ref":"#/definitions/Member"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"OK",
                  "schema":{
                     "$ref":"#/definitions/Member"
                  }
               },
               "400":{
                  "description":"Bad Request"
               },
               "500":{
                  "description":"Internal Server Error"
                }
            }
         }
      },
      "/member/findByMobileNumber":{
         "get":{
            "tags":[
               "MemberMgmtServiceApi"
            ],
            "summary":"Find all the members by status",
            "description":"Find all the members by status",
            "operationId":"findMemberByMobileNumber",
            "consumes":[
               "application/json",
               "application/xml"
            ],
            "produces":[
               "application/json",
               "application/xml"
            ],
            "parameters":[
               {
                  "name":"xChannel",
                  "in":"header",
                  "required":false,
                  "type":"string",
                  "minLength":3,
                  "maxLength":36
               },
               {
                "name": "mobileNo",
                "in": "query",
                "required": false,
                "type": "string"
               }
            ],
            "responses":{
              "200":{
                  "description":"Successfully found",
                  "schema":{
                     "$ref":"#/definitions/Member"
                  }
               },
               "400":{
                  "description":"Invalid Member number supplied"
               },
               "404":{
                  "description":"Member not found or inactive"
               },
               "500":{
                  "description":"Internal Server Error"
               }

            }
         }
      },
      "/member/findByStatus":{
         "get":{
            "tags":[
               "MemberMgmtServiceApi"
            ],
            "summary":"Find all the members by status",
            "description":"Find all the members by status",
            "operationId":"findMembersByStatus",
            "consumes":[
               "application/json",
               "application/xml"
            ],
            "produces":[
               "application/json",
               "application/xml"
            ],
            "parameters":[
               {
                  "name":"xChannel",
                  "in":"header",
                  "required":false,
                  "type":"string",
                  "minLength":3,
                  "maxLength":36
               },
               {
                "name": "status",
        "in": "query",
        "description": "The status to restrict the results to.  If not provided, all records are returned",
        "required": false,
        "type": "string",
        "enum": ["A","I"]
               }
            ],
            "responses":{
               "200":{
                  "description":"OK",
                  "schema":{
           "type" :"array",
           "items":{
            "$ref":"#/definitions/Member"
           }
                  }
               },
               "400":{
                  "description":"Invalid status value"
               },
               "500":{
                  "description":"Internal Server Error"
                }
            }
         }
      },
    "/member/createWithArray":{
    "post":{
      "tags":[
        "MemberMgmtServiceApi"
      ],
      "summary":"Member Creation with input arrays Service",
            "description":"Member Finding Service",
            "operationId":"createMembersWithArrayInput",
       "consumes":[
               "application/json"
            ],
            "produces":[
               "application/json"
            ],
      "parameters":[
               {
                  "name":"xChannel",
                  "in":"header",
                  "required":false,
                  "type":"string",
                  "minLength":3,
                  "maxLength":36
               },
               {
                  "in":"body",
                  "name":"body",
                  "required":true,
                  "schema":{
           "type" :"array",
           "items":{
            "$ref":"#/definitions/Member"
           }
                  }
               }
            ],
      "responses":{
               "200":{
                  "description":"Successfully found"
                 
               },
               "500":{
                  "description":"Internal Server Error"
               }
            }
    }
    },
    "/member/{id}":{
         "get":{
            "tags":[
               "MemberMgmtServiceApi"
            ],
            "summary":"Find Member Details based on the member id",
            "description":"Find Member Details based on the member id",
            "operationId":"findMemberDetailsById",
            "consumes":[
               "application/json"
            ],
            "produces":[
               "application/json"
            ],
            "parameters":[
               {
                  "name":"id",
                  "in":"path",
                  "required":true,
                  "description":"Member Id",
                  "type":"integer"
               }
            ],
            "responses":{
               "200":{
                  "description":"Successfully found",
                  "schema":{
                     "$ref":"#/definitions/Member"
                  }
               },
               "400":{
                  "description":"Invalid Member name and password supplied"
               },
               "404":{
                  "description":"Member not found or inactive"
               },
               "500":{
                  "description":"Internal Server Error"
               }
            }
         },
      "put":{
            "tags":[
               "MemberMgmtServiceApi"
            ],
            "summary":"Update Member Details based on the member id",
            "description":"Update Member Details based on the member id",
            "operationId":"updateMemberById",
            "consumes":[
               "application/json"
            ],
            "produces":[
               "application/json"
            ],
            "parameters":[
               {
                  "name":"id",
                  "in":"path",
                  "required":true,
                  "description":"Member Id",
                  "type":"integer"
               },
         {
                  "in":"body",
                  "name":"body",
                  "required":true,
                  "schema":{
                     "$ref":"#/definitions/Member"
                  }
               }
            ],
            "responses":{
               "200":{
                  "description":"Successfully found",
                  "schema":{
                     "$ref":"#/definitions/Member"
                  }
               },
               "400":{
                  "description":"Invalid Member name supplied"
               },
               "404":{
                  "description":"Member not found or inactive"
               },
               "500":{
                  "description":"Internal Server Error"
               }
            }
         },
     "delete":{
            "tags":[
               "MemberMgmtServiceApi"
            ],
            "summary":"Member Deletion Service based on the member id",
            "description":"Member Deletion Service based on the member id",
            "operationId":"deleteMemberById",
            "consumes":[
               "application/json"
            ],
            "produces":[
               "application/json"
            ],
            "parameters":[
                {
                   "name":"id",
                  "in":"path",
                  "required":true,
                  "description":"Member Id",
                  "type":"integer"
               }
            ],
            "responses":{
               "200":{
                  "description":"Member deleted succussfully"
               },
               "400":{
                  "description":"Invalid User id supplied"
               },
               "404":{
                  "description":"Member Id not found"
               },
               "500":{
                  "description":"Internal Server Error"
               }
            }
         }
      }
   },
   "definitions":{
    "Person":{
    "type":"object",
         "required":[
            "firstName",
            "userName"
         ],
     "properties":{
            "id":{
               "type":"integer",
               "format":"int64",
               "description":"user id"
            },
            "userName":{
               "type":"string",
               "minLength":1,
               "maxLength":50,
               "description":"User name of the member"
            },
            "userId":{
               "type":"string",
               "minLength":1,
               "maxLength":50,
               "description":"User name of the member"
            },
            "firstName":{
               "type":"string",
               "minLength":1,
               "maxLength":50,
               "description":"Password of the user"
            },
      "lastName":{
               "type":"string",
               "minLength":1,
               "maxLength":50,
               "description":"Password of the user"
            },
      "dateOfBirth":{
               "type":"string",
               "format":"date",
               "description":"Date of the birth"
            },
      "gender":{
               "type":"string",
               "enum": ["M","F"],
               "description":"Person Gender"
            },
      "maritalStatus":{
               "type":"string",
               "enum": ["M","S"],
               "description":"Marital Status"
            },
            "emailId":{
               "type":"string",
               "minLength":1,
               "maxLength":150,
               "description":"Email id"
            },
      "photoId":{
               "type":"string",
               "minLength":1,
               "maxLength":150,
               "description":"Photo Id"
            },
      "mobileNo":{
               "type":"string",
               "minLength":1,
               "maxLength":50,
               "description":"Primary Mobile number"
            },
      "altMobileNo":{
               "type":"string",
               "minLength":1,
               "maxLength":50,
               "description":"Secondary Mobile number"
            },
            "addresses":{
               "type":"array",
               "items":{
                  "$ref": "#/definitions/Address",
                  "description":"Person Address"
               }
            },
            "identities":{
               "type":"array",
               "items":{
                  "$ref": "#/definitions/Identity",
                  "description":"Person Identity"
               }
            },
            "status":{
               "type":"string",
               "enum": ["A","I"],
               "description":"Password of the user"
            },
            "groupId":{
               "type":"integer",
               "format":"int32",
               "description":"Group Id"
            }
         }
      },
      "Identity":{
         "properties":{
            "id":{
               "type":"integer",
               "format":"int64",
               "description":"user id"
            },
            "documentType":{
               "type":"string",
               "enum": ["Passport","AadharCard","VoterId","PanCard","DrivingLicense"],
               "description":"Password of the user"
            },
      "documentNumber":{
               "type":"string",
               "description":"User Type"
            },
      "documentName":{
               "type":"string",
               "description":"User Type"
            },
      "documentPath":{
               "type":"string",
               "description":"User Type"
            },
            "documentDetails":{
               "type":"string",
               "description":"User Type"
            },
      "groupId":{
               "type":"integer",
               "format":"int32",
               "description":"User Group"
            }
            
         }
      },
      "Address":{
         "properties":{
           "id":{
               "type":"integer",
               "format":"int64",
               "description":"user id"
            },
            "houseNo":{
               "type":"string",
               "description":"User Type"
            },
      "addressLine1":{
               "type":"string",
               "description":"User Type"
            },
      "addressLine2":{
               "type":"string",
               "description":"User Type"
            },
            "city":{
               "type":"string",
               "description":"User Type"
            },
            "state":{
               "type":"string",
               "description":"User Type"
            },
            "country":{
               "type":"string",
               "description":"User Type"
            },
            "pinCode":{
               "type":"string",
               "description":"User Type"
            },
            "landmark":{
               "type":"string",
               "description":"User Type"
            },
            "type":{
               "type":"string",
               "description":"User Type"
            },
            "addressType":{
               "type":"string",
               "description":"User Type"
            },
            "groupId":{
               "type":"integer",
               "format":"int32",
               "description":"Group Id"
            }
         }
      },
    "Devotee":{
    "allOf":
    ["$ref":"#/definitions/Person",
    "type":"object"],
         "properties":{
            "devoteeType":{
               "type":"string",
               "description":"devotee id"
            },
            "groupId":{
               "type":"integer",
               "format":"int32",
               "description":"Group Id"
            }
         }
     
      },
      "Sevadar":{
    "allOf":
    ["$ref":"#/definitions/Person",
    "type":"object"],
         "required":[
            "sevadarCategory"
         ],
         "properties":{
            "sevadarCategory":{
               "type":"string",
               "enum": ["Aanrtik","Bahari","Ratri"],
               "description":"Sevadar Category"
            },
            "sevaDays": {
                "type": "array",
                "items": {
                "type": "string",
                "enum": ["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]
                        
                }
            },
            "joiningDate":{
               "type":"string",
               "format":"date",
               "description":"Date of the birth"
            },
            "groupId":{
               "type":"integer",
               "format":"int32",
               "description":"Group Id"
            }
    
         }
     
      },
      "Member":{
    "allOf":
    ["$ref":"#/definitions/Person",
    "type":"object"],
         "required":[
            "memberType"
         ],
         "properties":{
            "memberType":{
               "type":"string",
               "enum": ["Lifetime","OneYear","ThreeYear","FiveYear"],
               "description":"Password of the user"
            },
            "joiningDate":{
               "type":"string",
               "format":"date",
               "description":"Date of the birth"
            },
            "validity":{
               "type":"string",
               "format":"date",
               "description":"Date of the birth"
            },
            "groupId":{
               "type":"integer",
               "format":"int32",
               "description":"Group Id"
            }
        
         }
     
      }
      
    }
}